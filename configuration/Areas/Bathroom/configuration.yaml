bathroom:
  template:
    - trigger:
        - platform: state
          entity_id:
            - binary_sensor.bathroom_motion
            - binary_sensor.bathroom_door_contact
            - input_boolean.bathroom_occupied_override
      binary_sensor:
        - name: Bathroom Occupancy
          unique_id: bathroom_occupancy
          device_class: occupancy
          state: >-
            {% set scores = namespace(total=0) %}
            {% if is_state('binary_sensor.bathroom_motion', 'on') %}
              {% set scores.total = scores.total + 3 %}
            {% endif %}
            {% if is_state('binary_sensor.bathroom_door_contact', 'off') %}
              {% set scores.total = scores.total + 1 %}
            {% endif %}
            {% if is_state('input_boolean.bathroom_occupied_override', 'on') %}
              {% set scores.total = scores.total + 5 %}
            {% endif %}
            {{ scores.total >= 3 }}
          attributes:
            confidence_score: >-
              {% set scores = namespace(total=0) %}
              {% if is_state('binary_sensor.bathroom_motion', 'on') %}
                {% set scores.total = scores.total + 3 %}
              {% endif %}
              {% if is_state('binary_sensor.bathroom_door_contact', 'off') %}
                {% set scores.total = scores.total + 1 %}
              {% endif %}
              {% if is_state('input_boolean.bathroom_occupied_override', 'on') %}
                {% set scores.total = scores.total + 5 %}
              {% endif %}
              {{ scores.total }}
            active_triggers: >-
              {% set triggers = [] %}
              {% if is_state('binary_sensor.bathroom_motion', 'on') %}
                {% set triggers = triggers + ['Motion Detected'] %}
              {% endif %}
              {% if is_state('binary_sensor.bathroom_door_contact', 'off') %}
                {% set triggers = triggers + ['Door Closed'] %}
              {% endif %}
              {% if is_state('input_boolean.bathroom_occupied_override', 'on') %}
                {% set triggers = triggers + ['Manual Override'] %}
              {% endif %}
              {{ triggers|join(', ') }}
    - binary_sensor:
        - name: Bathroom Temperature Rising
          unique_id: bathroom_temp_rising
          state: |-
            {% set current = states('sensor.bathroom_temperature')|float(20) %}
            {% set previous = state_attr('sensor.bathroom_temperature', 'previous_value')|float(20) %}
            {% set threshold = 0.2 %}
            {{ (current - previous) > threshold }}
        - name: Bathroom Temperature Falling
          unique_id: bathroom_temp_falling
          state: |-
            {% set current = states('sensor.bathroom_temperature')|float(20) %}
            {% set previous = state_attr('sensor.bathroom_temperature', 'previous_value')|float(20) %}
            {% set threshold = 0.2 %}
            {{ (current - previous) < threshold }}
      sensor:
        - name: Bathroom Temperature Differential
          unique_id: bathroom_temp_differential
          state: |-
            {% set current = states('sensor.bathroom_temperature')|float(20) %}
            {% set target = state_attr('climate.bathroom', 'temperature')|float(20) %}
            {{ (current - target)|round(1) }}
          attributes:
            current_temp: >-
              {{ states('sensor.bathroom_temperature')|float(20) }}
            target_temp: >-
              {{ state_attr('climate.bathroom', 'temperature')|float(20) }}
            mode: >-
              {{ state_attr('climate.bathroom', 'hvac_action')|default('off') }}
    - binary_sensor:
        - name: Bathroom High Humidity
          unique_id: bathroom_high_humidity
          state: |-
            {% set current = states('sensor.bathroom_humidity')|float(50) %}
            {{ current > 75 }}
      sensor:
        - name: Bathroom Humidity Change
          unique_id: bathroom_humidity_change
          state: |-
            {% set current = states('sensor.bathroom_humidity')|float(50) %}
            {% set average = states('sensor.sensor.bathroom_humidity_average')|float(50) %}
            {{ ((current - average) / average * 100)|round(1) }}
          attributes:
            current_humidity: >-
              {{ states('sensor.bathroom_humidity')|float(50) }}
            average_humidity: >-
              {{ states('sensor.sensor.bathroom_humidity_average')|float(50) }}
  input_number:
    bathroom_temp_threshold:
      name: Bathroom Temperature Threshold
      min: 19.0
      max: 25.0
      step: 0.5
      unit_of_measurement: Â°C
      icon: mdi:thermometer
      initial: 23.0
    bathroom_light_brightness:
      name: Bathroom Light Brightness
      min: 0.0
      max: 100.0
      step: 5.0
      unit_of_measurement: "%"
      icon: mdi:brightness-6
      initial: 100.0
    bathroom_light_transition:
      name: Bathroom Light Transition Time
      min: 0.0
      max: 10.0
      step: 0.5
      unit_of_measurement: s
      icon: mdi:transition
      initial: 5.0
    bathroom_humidity_threshold:
      name: Bathroom Humidity Threshold
      min: 30.0
      max: 80.0
      step: 1.0
      unit_of_measurement: "%"
      icon: mdi:water-percent
      initial: 60.0
  input_boolean:
    bathroom_light_color_mode:
      name: Bathroom Light Color Mode
      icon: mdi:palette
    bathroom_occupied_override:
      name: Bathroom Manual Occupancy Override
      icon: mdi:account-check
    bathroom_sleep_mode:
      name: Bathroom Sleep Mode
      icon: mdi:power-sleep
    bathroom_automations:
      name: Bathroom Automations
      icon: mdi:robot
