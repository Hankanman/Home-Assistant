study:
  # Binary Sensors
  #----------------------------------#
  # MQTT
  #----------------------------------#
  mqtt:
    binary_sensor:
      name: Starrunner Online
      state_topic: homeassistant/sensor/STARRUNNER/availability
      payload_on: "online"
      payload_off: "offline"
      device_class: connectivity

  binary_sensor:
    # Bayesian
    #----------------------------------#
    - platform: bayesian
      name: Study Occupied
      prior: 0.25
      device_class: occupancy
      probability_threshold: 0.8
      observations:

        - platform: "state"
          entity_id: binary_sensor.starrunner_active
          prob_given_true: 0.4782515
          prob_given_false: 0.0043238
          to_state: "on"

        - platform: "state"
          entity_id: binary_sensor.starrunner_microphoneactive
          prob_given_true: 0.1055744
          prob_given_false: 0.0016362
          to_state: "on"

        - platform: "state"
          entity_id: binary_sensor.starrunner_webcamactive
          prob_given_true: 0.0140238
          prob_given_false: 0.0002396
          to_state: "on"

        - platform: "state"
          entity_id: binary_sensor.study_bright
          prob_given_true: 0.0454762
          prob_given_false: 0.1286207
          to_state: "on"

        - platform: "state"
          entity_id: binary_sensor.study_door_contact
          prob_given_true: 0.0056548
          prob_given_false: 0.0000974
          to_state: "off"

        - platform: "state"
          entity_id: binary_sensor.study_motion
          prob_given_true: 0.4568765
          prob_given_false: 0.0042997
          to_state: "on"

        - platform: "state"
          entity_id: binary_sensor.study_motion_1_occupancy
          prob_given_true: 0.4568482
          prob_given_false: 0.0042997
          to_state: "on"

        - platform: "state"
          entity_id: binary_sensor.study_window_left_contact
          prob_given_true: 0.03
          prob_given_false: 0.0004761
          to_state: "on"

        - platform: "state"
          entity_id: binary_sensor.study_window_right_contact
          prob_given_true: 0.03
          prob_given_false: 0.0009772
          to_state: "on"


    # Network
    #----------------------------------#
    - platform: ping
      host: !secret starrunner_ip_2gb
      name: "Starrunner State"

    - platform: ping
      host: !secret endeavor_ip_management
      name: "Endeavor State"

  # Variable Sensors
  #----------------------------------#
  sensor:

  # Template Sensors
  #----------------------------------#
  template:
    # Template Binary Sensors
    #----------------------------------#
    binary_sensor:
      # Bright Sensors
      #----------------------------------#
      - unique_id: study_bright
        name: "Study Bright"
        device_class: light
        state: |
          {% set lux = states('sensor.study_illuminance') %}
          {% set threshold = states('input_number.study_illuminance_level') %}
          {% set selfState = states('binary_sensor.study_bright') %}
          {% set lightState = states('light.study') %}
          {% set selfLastChanged = states.binary_sensor.study_bright.last_changed %}
          {% if lux | int(0) > (threshold | int(0) * 1.3) and lightState == 'off' %}
            True
          {% elif lux | int(0) > (threshold | int(0) * 3) %}
            True
          {% elif ((threshold | int(0) < lux | int(0) < (threshold | int(0) * 1.3 ))) and (as_timestamp(now())-as_timestamp(selfLastChanged) < 300) %}
            {{ selfState }}
          {% elif lux | int(0) < threshold | int(0) %}
            False
          {% else %}
            False
          {% endif %}

    # Template Variable Sensors
    #----------------------------------#
    sensor:
      # Probabilities
      #----------------------------------#
      - unique_id: study_occupied_probability
        name: Study Occupied Probability
        state_class: measurement
        unit_of_measurement: "%"
        state: "{{ (state_attr('binary_sensor.study_occupied','probability')*100 | int(0) ) | round(0) }}"

      - unique_id: endeavor_array_free
        name: Endeavor Array Free
        state_class: measurement
        unit_of_measurement: "TB"
        state: "{{ ((states('sensor.endeavor_mnt_disk1_free') | float(0) + states('sensor.endeavor_mnt_disk2_free') | float(0) + states('sensor.endeavor_mnt_disk3_free') | float(0)) / 1000) | round(2) }}"

      - unique_id: endeavor_array_used
        name: Endeavor Array Used
        state_class: measurement
        unit_of_measurement: "TB"
        state: "{{ ((states('sensor.endeavor_mnt_disk1_used') | float(0) + states('sensor.endeavor_mnt_disk2_used') | float(0) + states('sensor.endeavor_mnt_disk3_used') | float(0)) / 1000) | round(2) }}"

      - unique_id: endeavor_array_total
        name: Endeavor Array Total
        state_class: measurement
        unit_of_measurement: "TB"
        state: "{{ states('sensor.endeavor_array_free') | float(0) + states('sensor.endeavor_array_used') | float(0) }}"

      - unique_id: endeavor_array_percent_used
        name: Endeavor Array Percent Used
        state_class: measurement
        unit_of_measurement: "%"
        state: "{{ (states('sensor.endeavor_array_used') | float(1) / states('sensor.endeavor_array_total') | float(2) * 100) | round(2) }}"

      - unique_id: endeavor_array_cache_free
        name: Endeavor Array Cache Free
        state_class: measurement
        unit_of_measurement: "TB"
        state: "{{ ((states('sensor.endeavor_mnt_cache_free') | float(0)) / 1000) | round(2) }}"

      - unique_id: endeavor_array_cache_used
        name: Endeavor Array Cache Used
        state_class: measurement
        unit_of_measurement: "TB"
        state: "{{ ((states('sensor.endeavor_mnt_cache_used') | float(0)) / 1000) | round(2) }}"

      - unique_id: endeavor_array_cache_total
        name: Endeavor Array Cache Total
        state_class: measurement
        unit_of_measurement: "TB"
        state: "{{ states('sensor.endeavor_array_cache_free') | float(0) + states('sensor.endeavor_array_cache_used') | float(0) }}"

      - unique_id: endeavor_array_cache_percent_used
        name: Endeavor Array Cache Percent Used
        state_class: measurement
        unit_of_measurement: "%"
        state: "{{ states('sensor.endeavor_mnt_cache_used_percent') | float(0) }}"


  # Media Players
  #----------------------------------#
  media_player:
    - platform: hass_agent_mediaplayer
      name: "Starrunner"
      host: 192.168.1.89
      port: 5115
    # - platform: universal
    #   name: Starrunner
    #   state_template: >
    #     {% if is_state('binary_sensor.starrunner_online', 'on')  and  is_state_attr('media_player.spotify_seb', 'source', 'STARRUNNER') %}
    #       {% if is_state('media_player.spotify_seb', 'playing') %}
    #         playing
    #       {% else %}
    #         paused
    #       {% endif %}
    #     {% else %}
    #       idle
    #     {% endif %}
    #   children:
    #     - media_player.spotify_seb
    #   commands:
    #     media_play:
    #       service: switch.toggle
    #       target:
    #         entity_id: switch.starrunner_mediaplaypause
    #     media_pause:
    #       service: switch.toggle
    #       target:
    #         entity_id: switch.starrunner_mediaplaypause
    #     media_next_track:
    #       service: switch.toggle
    #       target:
    #         entity_id: switch.starrunner_medianext
    #     media_previous_track:
    #       service: switch.toggle
    #       target:
    #         entity_id: switch.starrunner_mediaprevious
    #     volume_up:
    #       service: switch.toggle
    #       target:
    #         entity_id: switch.starrunner_mediavolumeup
    #     volume_down:
    #       service: switch.toggle
    #       target:
    #         entity_id: switch.starrunner_mediavolumedown
    #     volume_mute:
    #       service: switch.toggle
    #       target:
    #         entity_id: switch.starrunner_mediamute

  # Notification Platforms
  #----------------------------------#
  notify:

  # Shell Commands
  #----------------------------------#
  shell_command:

  # Switches
  #----------------------------------#
  switch:

  # Cameras
  #----------------------------------#
  camera:
