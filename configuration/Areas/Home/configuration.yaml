home:
  # Binary Sensors
  #----------------------------------#
  binary_sensor:
    - platform: bayesian
      name: Home Occupied
      prior: 0.52
      device_class: occupancy
      probability_threshold: 0.7
      observations:
        - platform: "state"
          entity_id: binary_sensor.home_motion
          prob_given_true: 0.6031935
          prob_given_false: 0.0135159
          to_state: "on"
    # Bayesian
    #----------------------------------#
    # Trends
    #----------------------------------#
    # Humidity
    #----------------------------------#
    # Temperature
    #----------------------------------#

  # Variable Sensors
  #----------------------------------#
  sensor:
    # Weather
    #----------------------------------#
    # - platform: season

    # Energy
    #----------------------------------#
    - platform: rest
      name: Gas Total Usage
      device_class: energy
      unit_of_measurement: "kWh"
      json_attributes_path: "$.results[0]"
      json_attributes:
        - interval_start
        - interval_end
      value_template: "{{value_json.results[0].consumption}}"
      resource: !secret octopus_gas

    - platform: rest
      name: Electricity Total Usage
      device_class: energy
      unit_of_measurement: "kWh"
      json_attributes_path: "$.results[0]"
      json_attributes:
        - interval_start
        - interval_end
      value_template: "{{value_json.results[0].consumption}}"
      resource: !secret octopus_electricity

    - platform: rest
      name: Electricity Unit Cost
      device_class: monetary
      unit_of_measurement: "£/kWh"
      json_attributes_path: "$.results[0]"
      json_attributes:
        - value_exc_vat
        - value_inc_vat
        - valid_from
        - valid_to
      value_template: "{{value_json.results[0].value_inc_vat / 100}}"
      resource: !secret octopus_variable_electricity_tariff

    - platform: rest
      name: Gas Unit Cost
      device_class: monetary
      unit_of_measurement: "£/kWh"
      json_attributes_path: "$.results[0]"
      json_attributes:
        - value_exc_vat
        - value_inc_vat
        - valid_from
        - valid_to
      value_template: "{{value_json.results[0].value_inc_vat / 100}}"
      resource: !secret octopus_variable_gas_tariff

  # Template Sensors
  #----------------------------------#
  template:
    # Template Binary Sensors
    #----------------------------------#
    binary_sensor:
      # Bright Sensors
      #----------------------------------#
      # Presence
      #----------------------------------#
      - unique_id: people_home
        name: "People Home"
        icon: "mdi:home"
        device_class: presence
        state: "{{ is_state_attr('sensor.laura_location', 'Location', 'Home') or is_state_attr('sensor.seb_location', 'Location', 'Home') or is_state('device_tracker.laura_phone_wifi', 'Home') or is_state('device_tracker.seb_phone_wifi', 'Home') or is_state('input_boolean.guest_mode', 'on') }}"
    # Template Variable Sensors
    #----------------------------------#
    sensor:
      # Probabilities
      #----------------------------------#
      # Energy
      #----------------------------------#
      - unique_id: energy_total_usage
        name: Energy Total Usage
        device_class: energy
        unit_of_measurement: "kWh"
        state_class: measurement
        state: "{{ (states('sensor.electricity_total_usage') | float(0) + states('sensor.gas_total_usage') | float(0)) | round(2) }}"
        attributes:
          interval_start: "{{ as_timestamp(state_attr('sensor.electricity_total_usage', 'interval_start')) | timestamp_local }}"
          interval_end: "{{ as_timestamp(state_attr('sensor.electricity_total_usage', 'interval_end')) | timestamp_local }}"

      # # Bin Collection
      # #----------------------------------#
      # - unique_id: bin_collection
      #   name: Bin Collection
      #   icon: mdi:trash-can
      #   state: >
      #     {% set map = {"RECYCLE": "blue", "DOMESTIC": "black", "ORGANIC": "green"} %}
      #     {{ "The " }}
      #     {%- for type in state_attr('sensor.bin_collection_data', 'roundTypes') -%}
      #       {%- if loop.length > 1 -%}
      #         {%- if loop.first -%}
      #           {{map[type]}}
      #         {%- elif loop.last -%}
      #           {{ ", and " }}{{map[type]}}
      #         {%- else -%}
      #           {{ ", " }}{{map[type]}}
      #         {%- endif -%}
      #       {%- else -%}
      #         {{map[type]}}
      #       {%- endif -%}
      #     {%- endfor -%}
      #       {{strptime(state_attr('sensor.bin_collection_data', 'date'),"%Y-%m-%dT%H:%M:%SZ").strftime(" bin will be collected on %A, %b %d")}}
      #   attributes:
      #     Date: "{{ strptime(state_attr('sensor.bin_collection_data', 'date'),'%Y-%m-%dT%H:%M:%SZ').strftime('%d/%m/%Y') }}"
      #     Day: "{{ strptime(state_attr('sensor.bin_collection_data', 'date'),'%Y-%m-%dT%H:%M:%SZ').strftime('%A') }}"
      #     Types: >
      #       {% set map = {"RECYCLE": "blue", "DOMESTIC": "black", "ORGANIC": "green"} %}
      #       {%- for type in state_attr('sensor.bin_collection_data', 'roundTypes') -%}
      #         {%- if loop.length > 1 -%}
      #           {%- if loop.first -%}
      #             {{map[type]}}
      #           {%- elif loop.last -%}
      #             {{ ", and " }}{{map[type]}}
      #           {%- else -%}
      #             {{ ", " }}{{map[type]}}
      #           {%- endif -%}
      #         {%- else -%}
      #           {{map[type]}}
      #         {%- endif -%}
      #       {%- endfor -%}
      #     Delayed: "{% if state_attr('sensor.bin_collection_data', 'slippedCollection') %}Yes{% else %}No{% endif %}"
      #     Black: "{% if 'DOMESTIC' in state_attr('sensor.bin_collection_data', 'roundTypes') %}Yes{% else %}No{% endif %}"
      #     Blue: "{% if 'RECYCLE' in state_attr('sensor.bin_collection_data', 'roundTypes') %}Yes{% else %}No{% endif %}"
      #     Green: "{% if 'ORGANIC' in state_attr('sensor.bin_collection_data', 'roundTypes') %}Yes{% else %}No{% endif %}"
      #     Timestamp: "{{ as_timestamp(strptime(state_attr('sensor.bin_collection_data', 'date'),'%Y-%m-%dT%H:%M:%SZ')) }}"
      #     Reminder: >
      #       {% set map = {"RECYCLE": "blue", "DOMESTIC": "black", "ORGANIC": "green"} %}
      #       {{ "The " }}
      #         {%- for type in state_attr('sensor.bin_collection_data', 'roundTypes') -%}
      #           {%- if loop.length > 1 -%}
      #             {%- if loop.first -%}
      #               {{map[type]}}
      #             {%- elif loop.last -%}
      #               {{ " and " }}{{map[type]}}
      #             {%- else -%}
      #               {{ ", " }}{{map[type]}}
      #             {%- endif -%}
      #           {%- else -%}
      #             {{map[type]}}
      #           {%- endif -%}
      #         {%- endfor -%}
      #         {{" bin will be collected tomorrow, make sure they are out!"}}
  # Media Players
  #----------------------------------#
  media_player:

  # Notification Platforms
  #----------------------------------#
  notify:

  # Shell Commands
  #----------------------------------#
  shell_command:

  # Switches
  #----------------------------------#
  switch:

  # Cameras
  #----------------------------------#
  camera:

  # Utility Meters
  #----------------------------------#
  utility_meter:
    # electricity_meter:
    #   source: sensor.electricity_total_usage
    #   cycle: hourly
    # gas_meter:
    #   source: sensor.gas_total_usage
    #   cycle: hourly
